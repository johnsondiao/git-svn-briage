#!/usr/bin/python
import argparse
import sys,os
from SvnObject import *
from DgObject import *
from GitObject import *
import pdb

def FindLocalPath(LocalPath):
	for i in range(0, 1000):
		dgrepo = LocalPath + "/.dg"
		if os.path.exists(dgrepo):
			break
		else:
			LocalPath = os.path.abspath(os.path.join(LocalPath, os.path.pardir))
	return LocalPath
LocalPath = os.getcwd()

parser = argparse.ArgumentParser(description="Dg -- A briage tool between Svn and Git, Help you to work under Git from Svn enviroment")

'''The support commands'''
parser.add_argument('-i', action='store', help="Init a new workspace")
parser.add_argument('-s', action='store_true', help="update from svn")
parser.add_argument('-p', action='store_true', help="push changes to svn from loack workspace")
args = parser.parse_args()
if args.i:
	print "Get --init ", args.i
	Dg = DgObject()
	if False == Dg.Create(LocalPath, args.i):
		print "Create Dg workspace Failed"
		quit()

	WorkGit = GitObject()
	WorkGit.Create(LocalPath, name = "codes")
	WorkGit.Pull(Dg.GitObjectPath)
else:
	LocalPath = FindLocalPath(LocalPath)
if args.s:
	print "Get sync"
	Dg = DgObject(LocalPath + "/.dg")
	Dg.SyncFromSvn()
	WorkGit = GitObject(LocalPath + "/codes", "codes")
	WorkGit.Pull(Dg.GitObject.Path)
if args.p:
	print "Get push"
	Dg = DgObject(LocalPath + "/.dg")
	if False == Dg.GitObject.Pull(LocalPath + "/codes"):
		quit()
	Dg.PushToSvn()
